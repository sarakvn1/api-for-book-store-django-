# Generated by Django 3.1.4 on 2021-02-18 20:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Fa_first_name', models.CharField(max_length=50)),
                ('En_first_name', models.CharField(max_length=50)),
                ('Fa_last_name', models.CharField(max_length=50)),
                ('En_last_name', models.CharField(max_length=50)),
                ('sex', models.CharField(choices=[('f', 'female'), ('m', 'male')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isbn', models.IntegerField()),
                ('Fa_title', models.CharField(max_length=50)),
                ('En_title', models.CharField(max_length=50)),
                ('publication_date', models.DateTimeField(blank=True, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='images')),
                ('price', models.IntegerField(blank=True, null=True)),
                ('authors_id', models.ManyToManyField(to='api.Author')),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Fa_genre_name', models.CharField(max_length=50)),
                ('En_genre_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Fa_name', models.CharField(max_length=50)),
                ('En_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factorCode', models.CharField(max_length=10)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('quantity', models.IntegerField()),
                ('book_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.book')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dob', models.DateField(blank=True, null=True)),
                ('Fa_first_name', models.CharField(max_length=50)),
                ('Fa_last_name', models.CharField(max_length=50)),
                ('sex', models.CharField(choices=[('f', 'female'), ('m', 'male')], default='f', max_length=30)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Factor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('successfulPayment', models.BooleanField(default=False)),
                ('verified', models.BooleanField(default=False)),
                ('deliveredToTheCustomer', models.BooleanField(default=False)),
                ('deliveredToThePost', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='genre',
            field=models.ManyToManyField(to='api.Genre'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.publisher'),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('detail', models.CharField(max_length=500)),
                ('state', models.CharField(choices=[('rasht', 'rasht'), ('shiraz', 'shiraz'), ('tehran', 'tehran'), ('esfehan', 'esfehan'), ('tabriz', 'tabriz'), ('mashhad', 'mashhad')], max_length=500)),
                ('city', models.CharField(choices=[('rasht', 'rasht'), ('shiraz', 'shiraz'), ('tehran', 'tehran'), ('esfehan', 'esfehan'), ('tabriz', 'tabriz'), ('mashhad', 'mashhad')], max_length=500)),
                ('postalCode', models.IntegerField()),
                ('phoneNumber', models.IntegerField()),
                ('staticNumber', models.IntegerField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile')),
            ],
        ),
        migrations.CreateModel(
            name='StoreHouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('amount', models.IntegerField()),
                ('book_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.book')),
            ],
            options={
                'unique_together': {('amount', 'book_id')},
                'index_together': {('amount', 'book_id')},
            },
        ),
        migrations.CreateModel(
            name='BookReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_title', models.TextField(default='unknown', max_length=200)),
                ('review_content', models.TextField(max_length=450)),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('book_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.book')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('customer', 'book_id')},
                'index_together': {('customer', 'book_id')},
            },
        ),
        migrations.CreateModel(
            name='BookRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, null=True)),
                ('stars', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('book_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.book')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('customer', 'book_id')},
                'index_together': {('customer', 'book_id')},
            },
        ),
    ]
